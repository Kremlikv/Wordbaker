<?php
// Debug mode: show all PHP errors
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once 'db.php';
require_once 'session.php';
include 'styling.php';

$OPENROUTER_API_KEY = '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';
$OPENROUTER_MODEL = 'anthropic/claude-3-haiku';
$OPENROUTER_REFERER = 'https://kremlik.byethost15.com';
$APP_TITLE = 'KahootGenerator';
$THROTTLE_SECONDS = 1;

/* --- AJAX save handler --- */
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['ajax_save']) && $_POST['ajax_save'] == '1') {
    $saveTable = trim($_POST['save_table']);
    if (!empty($saveTable)) {
        $editedRows = $_POST['edited_rows'] ?? [];
        $deleteRows = $_POST['delete_rows'] ?? [];
        foreach ($editedRows as $id => $row) {
            if (in_array($id, $deleteRows)) {
                $conn->query("DELETE FROM `$saveTable` WHERE id=" . intval($id));
                continue;
            }
            $stmt = $conn->prepare("UPDATE `$saveTable` SET correct_answer=?, wrong1=?, wrong2=?, wrong3=? WHERE id=?");
            $stmt->bind_param("ssssi", $row['correct'], $row['wrong1'], $row['wrong2'], $row['wrong3'], $id);
            $stmt->execute();
            $stmt->close();
        }
        echo "OK";
    } else {
        echo "ERROR: No table specified";
    }
    exit; // Stop here so no HTML is sent
}

/* --- Check if quiz table exists --- */
function quizTableExists($conn, $table) {
    $quizTable = "quiz_choices_" . $table;
    $result = $conn->query("SHOW TABLES LIKE '" . $conn->real_escape_string($quizTable) . "'");
    return $result && $result->num_rows > 0;
}

/* --- Get folders & tables --- */
function getUserFoldersAndTables($conn, $username) {
    $allTables = [];
    $result = $conn->query("SHOW TABLES");
    while ($row = $result->fetch_array()) {
        $table = $row[0];
        if (stripos($table, $username . '_') === 0) {
            $suffix = substr($table, strlen($username) + 1);
            $suffix = preg_replace('/_+/', '_', $suffix);
            $parts = explode('_', $suffix, 2);
            if (count($parts) === 2 && trim($parts[0]) !== '') {
                $folder = $parts[0];
                $file = $parts[1];
            } else {
                $folder = 'Uncategorized';
                $file = $suffix;
            }
            $allTables[$folder][] = [
                'table_name' => $table,
                'display_name' => $file
            ];
        }
    }
    return $allTables;
}

$username = strtolower($_SESSION['username'] ?? '');
$conn->set_charset("utf8mb4");
$folders = getUserFoldersAndTables($conn, $username);
$folders['Shared'][] = ['table_name' => 'difficult_words', 'display_name' => 'Difficult Words'];
$folders['Shared'][] = ['table_name' => 'mastered_words', 'display_name' => 'Mastered Words'];

$folderData = [];
foreach ($folders as $folder => $tableList) {
    foreach ($tableList as $entry) {
        $folderData[$folder][] = [
            'table' => $entry['table_name'],
            'display' => $entry['display_name']
        ];
    }
}

$selectedTable = $_POST['table'] ?? $_GET['table'] ?? '';
$autoSourceLang = '';
$autoTargetLang = '';
if (!empty($selectedTable)) {
    $columnsRes = $conn->query("SHOW COLUMNS FROM `$selectedTable`");
    if ($columnsRes && $columnsRes->num_rows >= 2) {
        $cols = $columnsRes->fetch_all(MYSQLI_ASSOC);
        $autoSourceLang = ucfirst($cols[0]['Field']);
        $autoTargetLang = ucfirst($cols[1]['Field']);
    }
}

/* --- AI call --- */
function callOpenRouter($apiKey, $model, $czechWord, $correctAnswer, $targetLang, $referer, $appTitle) {

    $prompt = <<<EOT
    Create three different usual mistakes (wrong1, wrong2, wrong3) that a human student may make when translating $czechWord into $targetLang: $correctAnswer. 
    Vary the types of mistakes: article/gender confusion, false friends, near homophones, spelling errors, wrong diacritic marks, similar but incorrect verb form, wrong plural/singular, etc.
    Sometimes the mistakes are confusion of two things that have something in common: have the same word-root (Aufgang, Ausgang), similar function (Car, Van), similar spelling (lie, lay).
    Avoid nonsense strings, reversed words, randomly inserted letters, palindromes. 
    Avoid enclosing answers in quotes or numbering them.
    Do not explain the mistakes, do not add parentheses, do not add colons (:).
    
    Example: If the Czech word is kniha, you can generate bok or buuk but it is not acceptable to create "buuk" or :buuk or buuk (wrong spelling).
    Why? Because if the format is different from the source word, it will be a hint for readers showing them which word is correct and which was generated by you.
    These mistakes will be used to generate a quiz where readers will select which word is correct and which is wrong.
    EOT;


    $data = [
        "model" => $model,
        "messages" => [[
            "role" => "user",
            "content" => $prompt
            ]] 
        ];
   

    $ch = curl_init("https://openrouter.ai/api/v1/chat/completions");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        "Content-Type: application/json",
        "Authorization: Bearer $apiKey",
        "HTTP-Referer: $referer",
        "X-Title: $appTitle"
    ]);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    $response = curl_exec($ch);
    curl_close($ch);

    $decoded = json_decode($response, true);
    $output = $decoded['choices'][0]['message']['content'] ?? '';
    preg_match_all('/\d+\.?\s*(.*?)\s*(?:\\n|$)/', $output, $matches);
    return array_slice(array_map('trim', $matches[1]), 0, 3);
}

function naiveWrongAnswers($correct) {
    return [$correct . 'x', strrev($correct), substr($correct, 1) . substr($correct, 0, 1)];
}

/* --- Delete quiz and images --- */
if (isset($_POST['delete_quiz']) && !empty($_POST['delete_table'])) {
    $delTable = $conn->real_escape_string($_POST['delete_table']);
    $res = $conn->query("SELECT image_url FROM `$delTable` WHERE image_url LIKE 'uploads/quiz_images/%'");
    while ($row = $res->fetch_assoc()) {
        $filePath = __DIR__ . '/' . $row['image_url'];
        if (file_exists($filePath)) unlink($filePath);
    }
    $conn->query("DROP TABLE IF EXISTS `$delTable`");
    header("Location: generate_quiz_choices.php");
    exit;
}

/* --- Generate quiz if not exists --- */
$generatedTable = '';
if (!empty($selectedTable)) {
    $quizTable = "quiz_choices_" . $selectedTable;
    if (!quizTableExists($conn, $selectedTable)) {
        $result = $conn->query("SELECT * FROM `$selectedTable`");
        if ($result && $result->num_rows > 0) {
            $col1 = $result->fetch_fields()[0]->name;
            $col2 = $result->fetch_fields()[1]->name;
            $conn->query("CREATE TABLE `$quizTable` (
                id INT AUTO_INCREMENT PRIMARY KEY,
                question TEXT,
                correct_answer TEXT,
                wrong1 TEXT,
                wrong2 TEXT,
                wrong3 TEXT,
                source_lang VARCHAR(50),
                target_lang VARCHAR(50),
                image_url TEXT
            )");
            while ($row = $result->fetch_assoc()) {
                $question = trim($row[$col1]);
                $correct = trim($row[$col2]);
                if ($question === '' || $correct === '') continue;
                $wrongAnswers = callOpenRouter($OPENROUTER_API_KEY, $OPENROUTER_MODEL, $question, $correct, $autoTargetLang, $OPENROUTER_REFERER, $APP_TITLE) ?: naiveWrongAnswers($correct);
                [$wrong1, $wrong2, $wrong3] = array_pad($wrongAnswers, 3, '');
                $stmt = $conn->prepare("INSERT INTO `$quizTable` (question, correct_answer, wrong1, wrong2, wrong3, source_lang, target_lang) VALUES (?, ?, ?, ?, ?, ?, ?)");
                $stmt->bind_param("sssssss", $question, $correct, $wrong1, $wrong2, $wrong3, $autoSourceLang, $autoTargetLang);
                $stmt->execute();
                $stmt->close();
            }
        }
    }
    $generatedTable = $quizTable;
}

/* --- Output --- */
echo "<div class='content'>👤 Logged in as " . $_SESSION['username'] . " | <a href='logout.php'>Logout</a></div>";
echo "<h2 style='text-align:center;'>Generate AI Quiz Choices</h2>";
include 'file_explorer.php';

if (!empty($generatedTable)) {
    echo "<div id='saveMsg' style='color:green; text-align:center; font-weight:bold;'></div>";
    $res = $conn->query("SELECT * FROM `$generatedTable`");
    echo "<h3 style='text-align:center;'>📜 Edit Generated Quiz: <code>$generatedTable</code></h3>";
    echo "<form id='quizForm' method='POST' style='text-align:center;'>
            <input type='hidden' name='save_table' id='save_table' value='" . htmlspecialchars($generatedTable) . "'>
            <input type='hidden' name='ajax_save' value='1'>
            <table border='1' cellpadding='5' cellspacing='0' style='margin:auto;'>
                <tr><th>Czech</th><th>Correct</th><th>Wrong 1</th><th>Wrong 2</th><th>Wrong 3</th><th>Delete</th></tr>";
    while ($row = $res->fetch_assoc()) {
        $id = $row['id'];
        echo "<tr>
                <td>" . htmlspecialchars($row['question']) . "</td>
                <td><textarea name='edited_rows[$id][correct]' oninput='autoResize(this)'>" . htmlspecialchars($row['correct_answer']) . "</textarea></td>
                <td><textarea name='edited_rows[$id][wrong1]' oninput='autoResize(this)'>" . htmlspecialchars($row['wrong1']) . "</textarea></td>
                <td><textarea name='edited_rows[$id][wrong2]' oninput='autoResize(this)'>" . htmlspecialchars($row['wrong2']) . "</textarea></td>
                <td><textarea name='edited_rows[$id][wrong3]' oninput='autoResize(this)'>" . htmlspecialchars($row['wrong3']) . "</textarea></td>
                <td><input type='checkbox' name='delete_rows[]' value='" . intval($id) . "'></td>
              </tr>";
    }
    echo "</table><br>
          <button type='button' onclick='saveQuiz()'>📂 Save Changes</button>
          </form>

          <div style='text-align:center; margin-top:20px;'>
            <button type='button' onclick='goToAddPictures()'>🖼 Do you want to add pictures?</button>
          </div>

          <form method='POST' style='margin-top:20px; text-align:center;'>
            <input type='hidden' name='delete_table' value='" . htmlspecialchars($generatedTable) . "'>
            <button type='submit' name='delete_quiz' onclick='return confirm(\"Delete this quiz and all uploaded images?\")'>🗑 Delete Quiz</button>
          </form>";
}
?>
<script>
let quizTableName = '';
document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll("textarea").forEach(el => autoResize(el));
    const tableInput = document.getElementById('save_table');
    if (tableInput) {
        quizTableName = tableInput.value; // Store table name globally
    }
});

function autoResize(el) {
    el.style.height = "auto";
    el.style.height = (el.scrollHeight) + "px";
}

function saveQuiz() {
    const form = document.getElementById('quizForm');
    const formData = new FormData(form);
    fetch('generate_quiz_choices.php', {
        method: 'POST',
        body: formData
    })
    .then(r => r.text())
    .then(resp => {
        if (resp.trim() === "OK") {
            showMessage("✅ File saved");
        } else {
            showMessage("❌ " + resp);
        }
    })
    .catch(err => {
        showMessage("❌ Error saving");
    });
}

function goToAddPictures() {
    if (quizTableName) {
        window.location.href = 'add_images.php?table=' + encodeURIComponent(quizTableName);
    } else {
        alert("Error: No table name found.");
    }
}

function showMessage(msg) {
    const msgDiv = document.getElementById('saveMsg');
    msgDiv.textContent = msg;
    msgDiv.style.opacity = '1';
    setTimeout(() => { msgDiv.style.opacity = '0'; }, 3000); // Fade after 3s
}
</script>
